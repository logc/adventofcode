#lang racket/base

(require (only-in racket/list
                  flatten
                  first))

;; First puzzle

(define (captcha n)
  (define digits (number->digits n))
  (sum (matching digits (circle digits))))

(define (sum digits)
  (apply + digits))

(define (matching digits next-digits)
  (define zipped (map cons digits next-digits))
  (define (equal-pair? p) (= (car p) (cdr p)))
  (map car (filter equal-pair? zipped)))

(define (circle a-list)
  (flatten (cons (list-tail a-list 1) (first a-list))))

(define (number->digits n)
  (define (n->ds n)
    (define-values (q r) (quotient/remainder n 10))
    (cond [(zero? q) (list r)]
          [else (cons r (n->ds q))]))
  (reverse (n->ds n)))

(module+ test
  (require rackunit)
  (test-case "Number to digits"
    (check-equal? (number->digits 1122) '(1 1 2 2)))
  (test-case "Circle list"
    (check-equal? (circle '(1 1 2 2)) '(1 2 2 1)))
  (test-case "Match digits"
    (check-equal? (matching '(1 1 2 2) (circle '(1 1 2 2))) '(1 2)))
  (test-case "Captcha examples"
    (check-eq? (captcha 1122) 3)
    (check-eq? (captcha 1111) 4)
    (check-eq? (captcha 1234) 0)
    (check-eq? (captcha 91212129) 9)))

(module+ main
  (define puzzle-input
  (printf "First puzzle: \t~a~n" (captcha puzzle-input)))

;; Second puzzle

(define (new-captcha n)
  (define digits (number->digits n))
  (define rotated (rotate digits ((length digits) . / . 2)))
  (sum (matching digits rotated)))

(define (rotate a-list n-times)
  (cond [(zero? n-times) a-list]
        [else (rotate (circle a-list) (sub1 n-times))]))

(module+ test
  (test-case "Rotate list n times"
    (check-equal? (rotate '(1 2 1 2) 2) '(1 2 1 2))
    (check-equal? (rotate '(1 2 2 1) 2) '(2 1 1 2)))
  (test-case "New captcha examples"
    (check-equal? (new-captcha 1212) 6)
    (check-equal? (new-captcha 1221) 0)
    (check-equal? (new-captcha 123425) 4)
    (check-equal? (new-captcha 123123) 12)
    (check-equal? (new-captcha 12131415) 4)))

(module+ main
  (printf "Second puzzle: \t~a~n" (new-captcha puzzle-input)))
